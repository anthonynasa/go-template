// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"multi-tenant-b/dal/model"
)

func newSysCustomer(db *gorm.DB, opts ...gen.DOOption) sysCustomer {
	_sysCustomer := sysCustomer{}

	_sysCustomer.sysCustomerDo.UseDB(db, opts...)
	_sysCustomer.sysCustomerDo.UseModel(&model.SysCustomer{})

	tableName := _sysCustomer.sysCustomerDo.TableName()
	_sysCustomer.ALL = field.NewAsterisk(tableName)
	_sysCustomer.YHBH = field.NewString(tableName, "YHBH")
	_sysCustomer.BARCODE = field.NewString(tableName, "BARCODE")
	_sysCustomer.YHDZ = field.NewString(tableName, "YHDZ")
	_sysCustomer.ISUSED = field.NewString(tableName, "ISUSED")
	_sysCustomer.TCH = field.NewString(tableName, "TCH")
	_sysCustomer.WSTime = field.NewTime(tableName, "WSTime")
	_sysCustomer.UPDDTTM = field.NewTime(tableName, "UPD_DTTM")
	_sysCustomer.ADDDTTM = field.NewTime(tableName, "ADD_DTTM")
	_sysCustomer.BJBH = field.NewString(tableName, "BJBH")
	_sysCustomer.STATE = field.NewString(tableName, "STATE")
	_sysCustomer.DTNAME = field.NewString(tableName, "DTNAME")
	_sysCustomer.CMNAME = field.NewString(tableName, "CMNAME")
	_sysCustomer.LXR = field.NewString(tableName, "LXR")
	_sysCustomer.LXDH = field.NewString(tableName, "LXDH")
	_sysCustomer.LXDH2 = field.NewString(tableName, "LXDH2")
	_sysCustomer.LXDH3 = field.NewString(tableName, "LXDH3")
	_sysCustomer.MARK = field.NewString(tableName, "MARK")
	_sysCustomer.COMMENTTIME = field.NewTime(tableName, "COMMENTTIME")
	_sysCustomer.COMMENT = field.NewString(tableName, "COMMENT")
	_sysCustomer.LOCKED = field.NewString(tableName, "LOCKED")
	_sysCustomer.LockTime = field.NewTime(tableName, "LockTime")
	_sysCustomer.LOCKCustomer = field.NewString(tableName, "LOCKCustomer")
	_sysCustomer.OPERATOR = field.NewString(tableName, "OPERATOR")
	_sysCustomer.COMMENTDataRec = field.NewString(tableName, "COMMENT_DataRec")
	_sysCustomer.QueryBaseData = field.NewFloat64(tableName, "QueryBaseData")
	_sysCustomer.QueryData = field.NewFloat64(tableName, "QueryData")
	_sysCustomer.QueryTime = field.NewTime(tableName, "QueryTime")
	_sysCustomer.YHDZYG = field.NewString(tableName, "YHDZ_YG")
	_sysCustomer.IsGasOverflow = field.NewString(tableName, "isGasOverflow")
	_sysCustomer.IsGasOverflowTime = field.NewTime(tableName, "isGasOverflowTime")
	_sysCustomer.OpenDesc = field.NewString(tableName, "OpenDesc")
	_sysCustomer.IsWatchMeter = field.NewInt64(tableName, "isWatchMeter")
	_sysCustomer.YFFIsShow = field.NewInt64(tableName, "YFF_IsShow")
	_sysCustomer.YFFRestMoney = field.NewFloat64(tableName, "YFF_RestMoney")
	_sysCustomer.YFFRestGas = field.NewFloat64(tableName, "YFF_RestGas")
	_sysCustomer.YFFCISSettleGas = field.NewFloat64(tableName, "YFF_CISSettleGas")
	_sysCustomer.YFFCISSettleTime = field.NewTime(tableName, "YFF_CISSettleTime")
	_sysCustomer.VersionUsed = field.NewString(tableName, "VersionUsed")
	_sysCustomer.VersionFac = field.NewString(tableName, "VersionFac")
	_sysCustomer.TaskDes = field.NewString(tableName, "TaskDes")
	_sysCustomer.CheckTime = field.NewTime(tableName, "CheckTime")
	_sysCustomer.OpenAcountTime = field.NewTime(tableName, "OpenAcountTime")
	_sysCustomer.CISSECTNO = field.NewString(tableName, "CIS_SECT_NO")
	_sysCustomer.CISSECTNAME = field.NewString(tableName, "CIS_SECT_NAME")
	_sysCustomer.LeakGas = field.NewString(tableName, "LeakGas")
	_sysCustomer.LastValve = field.NewString(tableName, "LastValve")
	_sysCustomer.LastValveTime = field.NewTime(tableName, "LastValveTime")
	_sysCustomer.IsGasOverflowReason = field.NewString(tableName, "isGasOverflowReason")
	_sysCustomer.IsGasOverflowManage = field.NewString(tableName, "isGasOverflowManage")
	_sysCustomer.IsGasOverflowManageTime = field.NewTime(tableName, "isGasOverflowManageTime")
	_sysCustomer.Bankcard = field.NewString(tableName, "bankcard")
	_sysCustomer.YFFYearSettleMoney = field.NewFloat64(tableName, "YFF_YearSettleMoney")
	_sysCustomer.ComplaintNum = field.NewInt64(tableName, "ComplaintNum")
	_sysCustomer.ComplaintRecord = field.NewString(tableName, "ComplaintRecord")
	_sysCustomer.IsHeating = field.NewString(tableName, "IsHeating")
	_sysCustomer.IsHeatingRecord = field.NewString(tableName, "IsHeatingRecord")
	_sysCustomer.IsSendSMS = field.NewString(tableName, "IsSendSMS")
	_sysCustomer.IsGuShu = field.NewString(tableName, "IsGuShu")
	_sysCustomer.TchEnableTime = field.NewTime(tableName, "TchEnableTime")
	_sysCustomer.TchDisableTime = field.NewTime(tableName, "TchDisableTime")
	_sysCustomer.LongSuddenGasOverflow = field.NewString(tableName, "LongSuddenGasOverflow")
	_sysCustomer.CheckWanWei = field.NewString(tableName, "checkWanWei")
	_sysCustomer.PotentialUsers = field.NewInt64(tableName, "PotentialUsers")
	_sysCustomer.ImportComment = field.NewString(tableName, "importComment")
	_sysCustomer.PhoneSupport = field.NewBool(tableName, "PhoneSupport")
	_sysCustomer.BuName = field.NewString(tableName, "buName")
	_sysCustomer.BukeyBuNum = field.NewString(tableName, "bukeyBuNum")
	_sysCustomer.BuLocation = field.NewString(tableName, "buLocation")
	_sysCustomer.BuOperator = field.NewString(tableName, "buOperator")
	_sysCustomer.ChLastData = field.NewInt64(tableName, "chLastData")
	_sysCustomer.ChAccData = field.NewInt64(tableName, "chAccData")
	_sysCustomer.ChLastTime = field.NewTime(tableName, "chLastTime")
	_sysCustomer.ChAddTime = field.NewTime(tableName, "chAddTime")
	_sysCustomer.ChBattery = field.NewInt64(tableName, "chBattery")
	_sysCustomer.Chvalve = field.NewInt64(tableName, "chvalve")
	_sysCustomer.ChCurrentValve = field.NewInt64(tableName, "chCurrentValve")
	_sysCustomer.ChReadType = field.NewString(tableName, "chReadType")
	_sysCustomer.ChisDRError = field.NewBool(tableName, "chisDRError")
	_sysCustomer.AlarmLID1 = field.NewString(tableName, "AlarmLID1")
	_sysCustomer.AlarmLID2 = field.NewString(tableName, "AlarmLID2")
	_sysCustomer.Addtime = field.NewTime(tableName, "Addtime")
	_sysCustomer.Jzq1 = field.NewString(tableName, "jzq1")
	_sysCustomer.Jzq2 = field.NewString(tableName, "jzq2")
	_sysCustomer.Cenghao = field.NewString(tableName, "cenghao")
	_sysCustomer.HRSmsSendtime = field.NewTime(tableName, "HRSmsSendtime")
	_sysCustomer.AlarmTime1 = field.NewTime(tableName, "AlarmTime1")
	_sysCustomer.AlarmTime2 = field.NewTime(tableName, "AlarmTime2")
	_sysCustomer.Alarmcheck = field.NewString(tableName, "Alarmcheck")
	_sysCustomer.Alarmchecktime = field.NewTime(tableName, "Alarmchecktime")
	_sysCustomer.AlarmAddtime = field.NewTime(tableName, "Alarm_addtime")
	_sysCustomer.AlarmUploadtime = field.NewTime(tableName, "Alarm_uploadtime")
	_sysCustomer.AlarmPoweron = field.NewTime(tableName, "Alarm_poweron")
	_sysCustomer.AlarmPoweroff = field.NewTime(tableName, "Alarm_poweroff")
	_sysCustomer.AlarmCommentstate = field.NewString(tableName, "Alarm_commentstate")
	_sysCustomer.AlarmHistory = field.NewString(tableName, "Alarm_history")
	_sysCustomer.CBID = field.NewString(tableName, "CBID")
	_sysCustomer.AlarmRSSI1 = field.NewString(tableName, "AlarmRSSI1")
	_sysCustomer.AlarmRSSI2 = field.NewString(tableName, "AlarmRSSI2")
	_sysCustomer.NBRSSI = field.NewString(tableName, "NBRSSI")
	_sysCustomer.NBtime = field.NewTime(tableName, "NBtime")
	_sysCustomer.Huhao = field.NewString(tableName, "huhao")
	_sysCustomer.AlarmPictureCheck = field.NewString(tableName, "AlarmPictureCheck")
	_sysCustomer.AlarmPictureCheckTime = field.NewTime(tableName, "AlarmPictureCheckTime")
	_sysCustomer.AlarmContractNo = field.NewString(tableName, "AlarmContractNo")
	_sysCustomer.AlarmContractNoTime = field.NewTime(tableName, "AlarmContractNoTime")
	_sysCustomer.AlarmDeliveryNoteNo = field.NewString(tableName, "AlarmDeliveryNoteNo")
	_sysCustomer.AlarmDeliveryNoteNoTime = field.NewTime(tableName, "AlarmDeliveryNoteNoTime")
	_sysCustomer.WXAccountName = field.NewString(tableName, "WXAccountName")
	_sysCustomer.WXAccountPassword = field.NewString(tableName, "WXAccountPassword")
	_sysCustomer.WXRestMomey = field.NewString(tableName, "WXRestMomey")

	_sysCustomer.fillFieldMap()

	return _sysCustomer
}

type sysCustomer struct {
	sysCustomerDo

	ALL                     field.Asterisk
	YHBH                    field.String
	BARCODE                 field.String
	YHDZ                    field.String
	ISUSED                  field.String
	TCH                     field.String
	WSTime                  field.Time
	UPDDTTM                 field.Time
	ADDDTTM                 field.Time
	BJBH                    field.String
	STATE                   field.String
	DTNAME                  field.String
	CMNAME                  field.String
	LXR                     field.String
	LXDH                    field.String
	LXDH2                   field.String
	LXDH3                   field.String
	MARK                    field.String
	COMMENTTIME             field.Time
	COMMENT                 field.String
	LOCKED                  field.String
	LockTime                field.Time
	LOCKCustomer            field.String
	OPERATOR                field.String
	COMMENTDataRec          field.String
	QueryBaseData           field.Float64
	QueryData               field.Float64
	QueryTime               field.Time
	YHDZYG                  field.String
	IsGasOverflow           field.String
	IsGasOverflowTime       field.Time
	OpenDesc                field.String
	IsWatchMeter            field.Int64
	YFFIsShow               field.Int64
	YFFRestMoney            field.Float64
	YFFRestGas              field.Float64
	YFFCISSettleGas         field.Float64
	YFFCISSettleTime        field.Time
	VersionUsed             field.String
	VersionFac              field.String
	TaskDes                 field.String
	CheckTime               field.Time
	OpenAcountTime          field.Time
	CISSECTNO               field.String
	CISSECTNAME             field.String
	LeakGas                 field.String
	LastValve               field.String
	LastValveTime           field.Time
	IsGasOverflowReason     field.String
	IsGasOverflowManage     field.String
	IsGasOverflowManageTime field.Time
	Bankcard                field.String
	YFFYearSettleMoney      field.Float64
	ComplaintNum            field.Int64
	ComplaintRecord         field.String
	IsHeating               field.String
	IsHeatingRecord         field.String
	IsSendSMS               field.String
	IsGuShu                 field.String
	TchEnableTime           field.Time
	TchDisableTime          field.Time
	LongSuddenGasOverflow   field.String
	CheckWanWei             field.String
	PotentialUsers          field.Int64
	ImportComment           field.String
	PhoneSupport            field.Bool
	BuName                  field.String
	BukeyBuNum              field.String
	BuLocation              field.String
	BuOperator              field.String
	ChLastData              field.Int64
	ChAccData               field.Int64
	ChLastTime              field.Time
	ChAddTime               field.Time
	ChBattery               field.Int64
	Chvalve                 field.Int64
	ChCurrentValve          field.Int64
	ChReadType              field.String
	ChisDRError             field.Bool
	AlarmLID1               field.String
	AlarmLID2               field.String
	Addtime                 field.Time
	Jzq1                    field.String
	Jzq2                    field.String
	Cenghao                 field.String
	HRSmsSendtime           field.Time
	AlarmTime1              field.Time
	AlarmTime2              field.Time
	Alarmcheck              field.String
	Alarmchecktime          field.Time
	AlarmAddtime            field.Time
	AlarmUploadtime         field.Time
	AlarmPoweron            field.Time
	AlarmPoweroff           field.Time
	AlarmCommentstate       field.String
	AlarmHistory            field.String
	CBID                    field.String
	AlarmRSSI1              field.String
	AlarmRSSI2              field.String
	NBRSSI                  field.String
	NBtime                  field.Time
	Huhao                   field.String
	AlarmPictureCheck       field.String
	AlarmPictureCheckTime   field.Time
	AlarmContractNo         field.String
	AlarmContractNoTime     field.Time
	AlarmDeliveryNoteNo     field.String
	AlarmDeliveryNoteNoTime field.Time
	WXAccountName           field.String
	WXAccountPassword       field.String
	WXRestMomey             field.String

	fieldMap map[string]field.Expr
}

func (s sysCustomer) Table(newTableName string) *sysCustomer {
	s.sysCustomerDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysCustomer) As(alias string) *sysCustomer {
	s.sysCustomerDo.DO = *(s.sysCustomerDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysCustomer) updateTableName(table string) *sysCustomer {
	s.ALL = field.NewAsterisk(table)
	s.YHBH = field.NewString(table, "YHBH")
	s.BARCODE = field.NewString(table, "BARCODE")
	s.YHDZ = field.NewString(table, "YHDZ")
	s.ISUSED = field.NewString(table, "ISUSED")
	s.TCH = field.NewString(table, "TCH")
	s.WSTime = field.NewTime(table, "WSTime")
	s.UPDDTTM = field.NewTime(table, "UPD_DTTM")
	s.ADDDTTM = field.NewTime(table, "ADD_DTTM")
	s.BJBH = field.NewString(table, "BJBH")
	s.STATE = field.NewString(table, "STATE")
	s.DTNAME = field.NewString(table, "DTNAME")
	s.CMNAME = field.NewString(table, "CMNAME")
	s.LXR = field.NewString(table, "LXR")
	s.LXDH = field.NewString(table, "LXDH")
	s.LXDH2 = field.NewString(table, "LXDH2")
	s.LXDH3 = field.NewString(table, "LXDH3")
	s.MARK = field.NewString(table, "MARK")
	s.COMMENTTIME = field.NewTime(table, "COMMENTTIME")
	s.COMMENT = field.NewString(table, "COMMENT")
	s.LOCKED = field.NewString(table, "LOCKED")
	s.LockTime = field.NewTime(table, "LockTime")
	s.LOCKCustomer = field.NewString(table, "LOCKCustomer")
	s.OPERATOR = field.NewString(table, "OPERATOR")
	s.COMMENTDataRec = field.NewString(table, "COMMENT_DataRec")
	s.QueryBaseData = field.NewFloat64(table, "QueryBaseData")
	s.QueryData = field.NewFloat64(table, "QueryData")
	s.QueryTime = field.NewTime(table, "QueryTime")
	s.YHDZYG = field.NewString(table, "YHDZ_YG")
	s.IsGasOverflow = field.NewString(table, "isGasOverflow")
	s.IsGasOverflowTime = field.NewTime(table, "isGasOverflowTime")
	s.OpenDesc = field.NewString(table, "OpenDesc")
	s.IsWatchMeter = field.NewInt64(table, "isWatchMeter")
	s.YFFIsShow = field.NewInt64(table, "YFF_IsShow")
	s.YFFRestMoney = field.NewFloat64(table, "YFF_RestMoney")
	s.YFFRestGas = field.NewFloat64(table, "YFF_RestGas")
	s.YFFCISSettleGas = field.NewFloat64(table, "YFF_CISSettleGas")
	s.YFFCISSettleTime = field.NewTime(table, "YFF_CISSettleTime")
	s.VersionUsed = field.NewString(table, "VersionUsed")
	s.VersionFac = field.NewString(table, "VersionFac")
	s.TaskDes = field.NewString(table, "TaskDes")
	s.CheckTime = field.NewTime(table, "CheckTime")
	s.OpenAcountTime = field.NewTime(table, "OpenAcountTime")
	s.CISSECTNO = field.NewString(table, "CIS_SECT_NO")
	s.CISSECTNAME = field.NewString(table, "CIS_SECT_NAME")
	s.LeakGas = field.NewString(table, "LeakGas")
	s.LastValve = field.NewString(table, "LastValve")
	s.LastValveTime = field.NewTime(table, "LastValveTime")
	s.IsGasOverflowReason = field.NewString(table, "isGasOverflowReason")
	s.IsGasOverflowManage = field.NewString(table, "isGasOverflowManage")
	s.IsGasOverflowManageTime = field.NewTime(table, "isGasOverflowManageTime")
	s.Bankcard = field.NewString(table, "bankcard")
	s.YFFYearSettleMoney = field.NewFloat64(table, "YFF_YearSettleMoney")
	s.ComplaintNum = field.NewInt64(table, "ComplaintNum")
	s.ComplaintRecord = field.NewString(table, "ComplaintRecord")
	s.IsHeating = field.NewString(table, "IsHeating")
	s.IsHeatingRecord = field.NewString(table, "IsHeatingRecord")
	s.IsSendSMS = field.NewString(table, "IsSendSMS")
	s.IsGuShu = field.NewString(table, "IsGuShu")
	s.TchEnableTime = field.NewTime(table, "TchEnableTime")
	s.TchDisableTime = field.NewTime(table, "TchDisableTime")
	s.LongSuddenGasOverflow = field.NewString(table, "LongSuddenGasOverflow")
	s.CheckWanWei = field.NewString(table, "checkWanWei")
	s.PotentialUsers = field.NewInt64(table, "PotentialUsers")
	s.ImportComment = field.NewString(table, "importComment")
	s.PhoneSupport = field.NewBool(table, "PhoneSupport")
	s.BuName = field.NewString(table, "buName")
	s.BukeyBuNum = field.NewString(table, "bukeyBuNum")
	s.BuLocation = field.NewString(table, "buLocation")
	s.BuOperator = field.NewString(table, "buOperator")
	s.ChLastData = field.NewInt64(table, "chLastData")
	s.ChAccData = field.NewInt64(table, "chAccData")
	s.ChLastTime = field.NewTime(table, "chLastTime")
	s.ChAddTime = field.NewTime(table, "chAddTime")
	s.ChBattery = field.NewInt64(table, "chBattery")
	s.Chvalve = field.NewInt64(table, "chvalve")
	s.ChCurrentValve = field.NewInt64(table, "chCurrentValve")
	s.ChReadType = field.NewString(table, "chReadType")
	s.ChisDRError = field.NewBool(table, "chisDRError")
	s.AlarmLID1 = field.NewString(table, "AlarmLID1")
	s.AlarmLID2 = field.NewString(table, "AlarmLID2")
	s.Addtime = field.NewTime(table, "Addtime")
	s.Jzq1 = field.NewString(table, "jzq1")
	s.Jzq2 = field.NewString(table, "jzq2")
	s.Cenghao = field.NewString(table, "cenghao")
	s.HRSmsSendtime = field.NewTime(table, "HRSmsSendtime")
	s.AlarmTime1 = field.NewTime(table, "AlarmTime1")
	s.AlarmTime2 = field.NewTime(table, "AlarmTime2")
	s.Alarmcheck = field.NewString(table, "Alarmcheck")
	s.Alarmchecktime = field.NewTime(table, "Alarmchecktime")
	s.AlarmAddtime = field.NewTime(table, "Alarm_addtime")
	s.AlarmUploadtime = field.NewTime(table, "Alarm_uploadtime")
	s.AlarmPoweron = field.NewTime(table, "Alarm_poweron")
	s.AlarmPoweroff = field.NewTime(table, "Alarm_poweroff")
	s.AlarmCommentstate = field.NewString(table, "Alarm_commentstate")
	s.AlarmHistory = field.NewString(table, "Alarm_history")
	s.CBID = field.NewString(table, "CBID")
	s.AlarmRSSI1 = field.NewString(table, "AlarmRSSI1")
	s.AlarmRSSI2 = field.NewString(table, "AlarmRSSI2")
	s.NBRSSI = field.NewString(table, "NBRSSI")
	s.NBtime = field.NewTime(table, "NBtime")
	s.Huhao = field.NewString(table, "huhao")
	s.AlarmPictureCheck = field.NewString(table, "AlarmPictureCheck")
	s.AlarmPictureCheckTime = field.NewTime(table, "AlarmPictureCheckTime")
	s.AlarmContractNo = field.NewString(table, "AlarmContractNo")
	s.AlarmContractNoTime = field.NewTime(table, "AlarmContractNoTime")
	s.AlarmDeliveryNoteNo = field.NewString(table, "AlarmDeliveryNoteNo")
	s.AlarmDeliveryNoteNoTime = field.NewTime(table, "AlarmDeliveryNoteNoTime")
	s.WXAccountName = field.NewString(table, "WXAccountName")
	s.WXAccountPassword = field.NewString(table, "WXAccountPassword")
	s.WXRestMomey = field.NewString(table, "WXRestMomey")

	s.fillFieldMap()

	return s
}

func (s *sysCustomer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysCustomer) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 110)
	s.fieldMap["YHBH"] = s.YHBH
	s.fieldMap["BARCODE"] = s.BARCODE
	s.fieldMap["YHDZ"] = s.YHDZ
	s.fieldMap["ISUSED"] = s.ISUSED
	s.fieldMap["TCH"] = s.TCH
	s.fieldMap["WSTime"] = s.WSTime
	s.fieldMap["UPD_DTTM"] = s.UPDDTTM
	s.fieldMap["ADD_DTTM"] = s.ADDDTTM
	s.fieldMap["BJBH"] = s.BJBH
	s.fieldMap["STATE"] = s.STATE
	s.fieldMap["DTNAME"] = s.DTNAME
	s.fieldMap["CMNAME"] = s.CMNAME
	s.fieldMap["LXR"] = s.LXR
	s.fieldMap["LXDH"] = s.LXDH
	s.fieldMap["LXDH2"] = s.LXDH2
	s.fieldMap["LXDH3"] = s.LXDH3
	s.fieldMap["MARK"] = s.MARK
	s.fieldMap["COMMENTTIME"] = s.COMMENTTIME
	s.fieldMap["COMMENT"] = s.COMMENT
	s.fieldMap["LOCKED"] = s.LOCKED
	s.fieldMap["LockTime"] = s.LockTime
	s.fieldMap["LOCKCustomer"] = s.LOCKCustomer
	s.fieldMap["OPERATOR"] = s.OPERATOR
	s.fieldMap["COMMENT_DataRec"] = s.COMMENTDataRec
	s.fieldMap["QueryBaseData"] = s.QueryBaseData
	s.fieldMap["QueryData"] = s.QueryData
	s.fieldMap["QueryTime"] = s.QueryTime
	s.fieldMap["YHDZ_YG"] = s.YHDZYG
	s.fieldMap["isGasOverflow"] = s.IsGasOverflow
	s.fieldMap["isGasOverflowTime"] = s.IsGasOverflowTime
	s.fieldMap["OpenDesc"] = s.OpenDesc
	s.fieldMap["isWatchMeter"] = s.IsWatchMeter
	s.fieldMap["YFF_IsShow"] = s.YFFIsShow
	s.fieldMap["YFF_RestMoney"] = s.YFFRestMoney
	s.fieldMap["YFF_RestGas"] = s.YFFRestGas
	s.fieldMap["YFF_CISSettleGas"] = s.YFFCISSettleGas
	s.fieldMap["YFF_CISSettleTime"] = s.YFFCISSettleTime
	s.fieldMap["VersionUsed"] = s.VersionUsed
	s.fieldMap["VersionFac"] = s.VersionFac
	s.fieldMap["TaskDes"] = s.TaskDes
	s.fieldMap["CheckTime"] = s.CheckTime
	s.fieldMap["OpenAcountTime"] = s.OpenAcountTime
	s.fieldMap["CIS_SECT_NO"] = s.CISSECTNO
	s.fieldMap["CIS_SECT_NAME"] = s.CISSECTNAME
	s.fieldMap["LeakGas"] = s.LeakGas
	s.fieldMap["LastValve"] = s.LastValve
	s.fieldMap["LastValveTime"] = s.LastValveTime
	s.fieldMap["isGasOverflowReason"] = s.IsGasOverflowReason
	s.fieldMap["isGasOverflowManage"] = s.IsGasOverflowManage
	s.fieldMap["isGasOverflowManageTime"] = s.IsGasOverflowManageTime
	s.fieldMap["bankcard"] = s.Bankcard
	s.fieldMap["YFF_YearSettleMoney"] = s.YFFYearSettleMoney
	s.fieldMap["ComplaintNum"] = s.ComplaintNum
	s.fieldMap["ComplaintRecord"] = s.ComplaintRecord
	s.fieldMap["IsHeating"] = s.IsHeating
	s.fieldMap["IsHeatingRecord"] = s.IsHeatingRecord
	s.fieldMap["IsSendSMS"] = s.IsSendSMS
	s.fieldMap["IsGuShu"] = s.IsGuShu
	s.fieldMap["TchEnableTime"] = s.TchEnableTime
	s.fieldMap["TchDisableTime"] = s.TchDisableTime
	s.fieldMap["LongSuddenGasOverflow"] = s.LongSuddenGasOverflow
	s.fieldMap["checkWanWei"] = s.CheckWanWei
	s.fieldMap["PotentialUsers"] = s.PotentialUsers
	s.fieldMap["importComment"] = s.ImportComment
	s.fieldMap["PhoneSupport"] = s.PhoneSupport
	s.fieldMap["buName"] = s.BuName
	s.fieldMap["bukeyBuNum"] = s.BukeyBuNum
	s.fieldMap["buLocation"] = s.BuLocation
	s.fieldMap["buOperator"] = s.BuOperator
	s.fieldMap["chLastData"] = s.ChLastData
	s.fieldMap["chAccData"] = s.ChAccData
	s.fieldMap["chLastTime"] = s.ChLastTime
	s.fieldMap["chAddTime"] = s.ChAddTime
	s.fieldMap["chBattery"] = s.ChBattery
	s.fieldMap["chvalve"] = s.Chvalve
	s.fieldMap["chCurrentValve"] = s.ChCurrentValve
	s.fieldMap["chReadType"] = s.ChReadType
	s.fieldMap["chisDRError"] = s.ChisDRError
	s.fieldMap["AlarmLID1"] = s.AlarmLID1
	s.fieldMap["AlarmLID2"] = s.AlarmLID2
	s.fieldMap["Addtime"] = s.Addtime
	s.fieldMap["jzq1"] = s.Jzq1
	s.fieldMap["jzq2"] = s.Jzq2
	s.fieldMap["cenghao"] = s.Cenghao
	s.fieldMap["HRSmsSendtime"] = s.HRSmsSendtime
	s.fieldMap["AlarmTime1"] = s.AlarmTime1
	s.fieldMap["AlarmTime2"] = s.AlarmTime2
	s.fieldMap["Alarmcheck"] = s.Alarmcheck
	s.fieldMap["Alarmchecktime"] = s.Alarmchecktime
	s.fieldMap["Alarm_addtime"] = s.AlarmAddtime
	s.fieldMap["Alarm_uploadtime"] = s.AlarmUploadtime
	s.fieldMap["Alarm_poweron"] = s.AlarmPoweron
	s.fieldMap["Alarm_poweroff"] = s.AlarmPoweroff
	s.fieldMap["Alarm_commentstate"] = s.AlarmCommentstate
	s.fieldMap["Alarm_history"] = s.AlarmHistory
	s.fieldMap["CBID"] = s.CBID
	s.fieldMap["AlarmRSSI1"] = s.AlarmRSSI1
	s.fieldMap["AlarmRSSI2"] = s.AlarmRSSI2
	s.fieldMap["NBRSSI"] = s.NBRSSI
	s.fieldMap["NBtime"] = s.NBtime
	s.fieldMap["huhao"] = s.Huhao
	s.fieldMap["AlarmPictureCheck"] = s.AlarmPictureCheck
	s.fieldMap["AlarmPictureCheckTime"] = s.AlarmPictureCheckTime
	s.fieldMap["AlarmContractNo"] = s.AlarmContractNo
	s.fieldMap["AlarmContractNoTime"] = s.AlarmContractNoTime
	s.fieldMap["AlarmDeliveryNoteNo"] = s.AlarmDeliveryNoteNo
	s.fieldMap["AlarmDeliveryNoteNoTime"] = s.AlarmDeliveryNoteNoTime
	s.fieldMap["WXAccountName"] = s.WXAccountName
	s.fieldMap["WXAccountPassword"] = s.WXAccountPassword
	s.fieldMap["WXRestMomey"] = s.WXRestMomey
}

func (s sysCustomer) clone(db *gorm.DB) sysCustomer {
	s.sysCustomerDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysCustomer) replaceDB(db *gorm.DB) sysCustomer {
	s.sysCustomerDo.ReplaceDB(db)
	return s
}

type sysCustomerDo struct{ gen.DO }

type ISysCustomerDo interface {
	gen.SubQuery
	Debug() ISysCustomerDo
	WithContext(ctx context.Context) ISysCustomerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysCustomerDo
	WriteDB() ISysCustomerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysCustomerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysCustomerDo
	Not(conds ...gen.Condition) ISysCustomerDo
	Or(conds ...gen.Condition) ISysCustomerDo
	Select(conds ...field.Expr) ISysCustomerDo
	Where(conds ...gen.Condition) ISysCustomerDo
	Order(conds ...field.Expr) ISysCustomerDo
	Distinct(cols ...field.Expr) ISysCustomerDo
	Omit(cols ...field.Expr) ISysCustomerDo
	Join(table schema.Tabler, on ...field.Expr) ISysCustomerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysCustomerDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysCustomerDo
	Group(cols ...field.Expr) ISysCustomerDo
	Having(conds ...gen.Condition) ISysCustomerDo
	Limit(limit int) ISysCustomerDo
	Offset(offset int) ISysCustomerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCustomerDo
	Unscoped() ISysCustomerDo
	Create(values ...*model.SysCustomer) error
	CreateInBatches(values []*model.SysCustomer, batchSize int) error
	Save(values ...*model.SysCustomer) error
	First() (*model.SysCustomer, error)
	Take() (*model.SysCustomer, error)
	Last() (*model.SysCustomer, error)
	Find() ([]*model.SysCustomer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCustomer, err error)
	FindInBatches(result *[]*model.SysCustomer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysCustomer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysCustomerDo
	Assign(attrs ...field.AssignExpr) ISysCustomerDo
	Joins(fields ...field.RelationField) ISysCustomerDo
	Preload(fields ...field.RelationField) ISysCustomerDo
	FirstOrInit() (*model.SysCustomer, error)
	FirstOrCreate() (*model.SysCustomer, error)
	FindByPage(offset int, limit int) (result []*model.SysCustomer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysCustomerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(YHBH string) (result model.SysCustomer, err error)
}

// SELECT * FROM @@table WHERE YHBH=@YHBH
func (s sysCustomerDo) GetByID(YHBH string) (result model.SysCustomer, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, YHBH)
	generateSQL.WriteString("SELECT * FROM sys_customer WHERE YHBH=? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s sysCustomerDo) Debug() ISysCustomerDo {
	return s.withDO(s.DO.Debug())
}

func (s sysCustomerDo) WithContext(ctx context.Context) ISysCustomerDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysCustomerDo) ReadDB() ISysCustomerDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysCustomerDo) WriteDB() ISysCustomerDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysCustomerDo) Session(config *gorm.Session) ISysCustomerDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysCustomerDo) Clauses(conds ...clause.Expression) ISysCustomerDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysCustomerDo) Returning(value interface{}, columns ...string) ISysCustomerDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysCustomerDo) Not(conds ...gen.Condition) ISysCustomerDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysCustomerDo) Or(conds ...gen.Condition) ISysCustomerDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysCustomerDo) Select(conds ...field.Expr) ISysCustomerDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysCustomerDo) Where(conds ...gen.Condition) ISysCustomerDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysCustomerDo) Order(conds ...field.Expr) ISysCustomerDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysCustomerDo) Distinct(cols ...field.Expr) ISysCustomerDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysCustomerDo) Omit(cols ...field.Expr) ISysCustomerDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysCustomerDo) Join(table schema.Tabler, on ...field.Expr) ISysCustomerDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysCustomerDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysCustomerDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysCustomerDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysCustomerDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysCustomerDo) Group(cols ...field.Expr) ISysCustomerDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysCustomerDo) Having(conds ...gen.Condition) ISysCustomerDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysCustomerDo) Limit(limit int) ISysCustomerDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysCustomerDo) Offset(offset int) ISysCustomerDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysCustomerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCustomerDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysCustomerDo) Unscoped() ISysCustomerDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysCustomerDo) Create(values ...*model.SysCustomer) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysCustomerDo) CreateInBatches(values []*model.SysCustomer, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysCustomerDo) Save(values ...*model.SysCustomer) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysCustomerDo) First() (*model.SysCustomer, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCustomer), nil
	}
}

func (s sysCustomerDo) Take() (*model.SysCustomer, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCustomer), nil
	}
}

func (s sysCustomerDo) Last() (*model.SysCustomer, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCustomer), nil
	}
}

func (s sysCustomerDo) Find() ([]*model.SysCustomer, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysCustomer), err
}

func (s sysCustomerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCustomer, err error) {
	buf := make([]*model.SysCustomer, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysCustomerDo) FindInBatches(result *[]*model.SysCustomer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysCustomerDo) Attrs(attrs ...field.AssignExpr) ISysCustomerDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysCustomerDo) Assign(attrs ...field.AssignExpr) ISysCustomerDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysCustomerDo) Joins(fields ...field.RelationField) ISysCustomerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysCustomerDo) Preload(fields ...field.RelationField) ISysCustomerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysCustomerDo) FirstOrInit() (*model.SysCustomer, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCustomer), nil
	}
}

func (s sysCustomerDo) FirstOrCreate() (*model.SysCustomer, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCustomer), nil
	}
}

func (s sysCustomerDo) FindByPage(offset int, limit int) (result []*model.SysCustomer, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysCustomerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysCustomerDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysCustomerDo) Delete(models ...*model.SysCustomer) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysCustomerDo) withDO(do gen.Dao) *sysCustomerDo {
	s.DO = *do.(*gen.DO)
	return s
}
